name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      IS_GITHUB_PAGES: 'true'
      REPO_NAME: 'acce-website'   # <-- must match your repo exactly
    steps:
      - name: Check out your repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm config set registry https://registry.npmjs.org/
          npm ci

      - name: Build your site (static export to out/)
        run: npm run build

      - name: Add .nojekyll (needed for _next/)
        run: touch out/.nojekyll

      # --- Quick visibility into what's actually exported
      - name: Debug â€” list exported assets
        run: |
          echo "root .txt:"; ls -la out/*.txt || true
          echo "stories:";    ls -la out/stories || true
          echo "images:";     ls -la out/images  || true
          echo "avatars:";    ls -la out/avatars || true
          echo "Ongoing_Campaigns:"; ls -la out/Ongoing_Campaigns || true

      # --- Rewrite HTML & CSS
      - name: Prefix root-relative URLs in HTML/CSS
        run: |
          node - <<'NODE'
          const fs = require('fs'), path = require('path');
          const repo = (process.env.REPO_NAME || '').replace(/^\/+|\/+$/g, '');
          if (!repo) { console.error('REPO_NAME env missing'); process.exit(1); }
          const prefix = '/' + repo;
          const exts = new Set(['.html', '.css']);
          let files=0, edits=0;

          const addPrefix = (u) => {
            if (!u.startsWith('/')) return u;
            if (u.startsWith(prefix + '/')) return u;
            if (u.startsWith('/_next/')) return u;
            return prefix + u;
          };

          const rewrite = (s) => {
            // src|href|content
            s = s.replace(/\b(?:src|href|content)=["']([^"']+)["']/g, (m,u)=>{
              const nu = addPrefix(u); if(nu!==u){edits++; return m.replace(u,nu)}; return m;
            });
            // srcset
            s = s.replace(/\bsrcset=(["'])([^"']+)\1/g,(m,q,list)=>{
              const r = list.split(',').map(part=>{
                const t=part.trim(); if(!t) return t;
                const [u,...rest]=t.split(/\s+/); const nu=addPrefix(u);
                return [nu,...rest].join(' ');
              }).join(', ');
              if(r!==list) edits++; return `srcset=${q}${r}${q}`;
            });
            // url(...)
            s = s.replace(/url\(\s*(['"]?)(\/[^'")]+)\1\s*\)/g,(m,q,u)=>{
              const nu=addPrefix(u); if(nu!==u){edits++; return `url(${q}${nu}${q})`}; return m;
            });
            return s;
          };

          const walk = (dir) => {
            for (const d of fs.readdirSync(dir,{withFileTypes:true})) {
              const p = path.join(dir,d.name);
              if (d.isDirectory()) walk(p);
              else if (exts.has(path.extname(p))) {
                const before = fs.readFileSync(p,'utf8');
                const after = rewrite(before);
                if (after!==before) fs.writeFileSync(p,after);
                files++;
              }
            }
          };

          walk('out');
          console.log(`HTML/CSS processed: ${files} files; edits=${edits}; prefix=${prefix}`);
          NODE

      # --- Rewrite JS bundles (string literals/fetch) for whitelisted paths
      - name: Prefix whitelisted URLs in JS
        run: |
          node - <<'NODE'
          const fs=require('fs'), path=require('path');
          const repo=(process.env.REPO_NAME||'').replace(/^\/+|\/+$/g,'');
          if(!repo){console.error('REPO_NAME env missing');process.exit(1)}
          const prefix='/'+repo;
          const exts=new Set(['.js']);
          const WL=['images/','stories/','avatars/','Ongoing_Campaigns/'];
          const isRootTxt=(u)=>/^\/[A-Za-z0-9._-]+\.txt(\?|$)/.test(u);
          const shouldPrefix=(u)=>{
            if(!u.startsWith('/')) return false;
            if(u.startsWith(prefix+'/')) return false;
            if(u.startsWith('/_next/')) return false;
            if(isRootTxt(u)) return true;
            return WL.some(w=>u.startsWith('/'+w));
          };
          let files=0, edits=0;

          const rewrite=(s)=>{
            // quoted strings
            s = s.replace(/(['"`])\/(?!${repo}\/|_next\/)([^'"`\\)]*)\1/g,(m,q,rest)=>{
              const u='/'+rest; if(shouldPrefix(u)){edits++; return `${q}${prefix}${u}${q}`}; return m;
            });
            // fetch('/...'), new Request('/...')
            s = s.replace(/\b(fetch|Request)\(\s*(['"`])\/(?!${repo}\/|_next\/)([^'"`\\)]*)\2/g,(m,fn,q,rest)=>{
              const u='/'+rest; if(shouldPrefix(u)){edits++; return `${fn}(${q}${prefix}${u}${q}`}; return m;
            });
            return s;
          };

          const walk=(dir)=>{
            for(const d of fs.readdirSync(dir,{withFileTypes:true})){
              const p=path.join(dir,d.name);
              if(d.isDirectory()) walk(p);
              else if(exts.has(path.extname(p))){
                const before=fs.readFileSync(p,'utf8');
                const after=rewrite(before);
                if(after!==before) fs.writeFileSync(p,after);
                files++;
              }
            }
          };

          walk('out');
          console.log(`JS processed: ${files} files; edits=${edits}; prefix=${prefix}`);
          NODE

      # --- Rewrite RSC .txt payloads (this fixes "works after refresh" issue)
      - name: Prefix URLs inside RSC .txt payloads
        run: |
          node - <<'NODE'
          const fs=require('fs'), path=require('path');
          const repo=(process.env.REPO_NAME||'').replace(/^\/+|\/+$/g,'');
          if(!repo){console.error('REPO_NAME env missing');process.exit(1)}
          const prefix='/'+repo;
          const exts=new Set(['.txt']);
          const WL=['images/','stories/','avatars/','Ongoing_Campaigns/'];
          const isRootTxt=(u)=>/^\/[A-Za-z0-9._-]+\.txt(\?|$)/.test(u);
          const shouldPrefix=(u)=>{
            if(!u.startsWith('/')) return false;
            if(u.startsWith(prefix+'/')) return false;
            if(u.startsWith('/_next/')) return false;
            if(isRootTxt(u)) return true;
            return WL.some(w=>u.startsWith('/'+w));
          };
          let files=0, edits=0;

          const addPrefix=(u)=> shouldPrefix(u) ? (prefix+u) : u;

          const rewrite=(s)=>{
            // Most URLs appear quoted inside the flight stream; patch conservatively:
            s = s.replace(/(["'`])\/(?!${repo}\/|_next\/)([^"'`\\\s)]+)\1/g,(m,q,rest)=>{
              const u='/'+rest; const nu=addPrefix(u);
              if(nu!==u){edits++; return `${q}${nu}${q}`}; return m;
            });
            // Also catch unquoted srcset-like fragments inside the stream (rare):
            s = s.replace(/(^|,\s*)\/(?!${repo}\/|_next\/)(?:images|stories|avatars|Ongoing_Campaigns)\/[^\s,]+/g,(m,lead)=>{
              const u=m.trim(); const nu=addPrefix(u);
              if(nu!==u){edits++; return `${lead}${nu}`}; return m;
            });
            return s;
          };

          const walk=(dir)=>{
            for(const d of fs.readdirSync(dir,{withFileTypes:true})){
              const p=path.join(dir,d.name);
              if(d.isDirectory()) walk(p);
              else if(exts.has(path.extname(p))){
                const before=fs.readFileSync(p,'utf8');
                const after=rewrite(before);
                if(after!==before) fs.writeFileSync(p,after);
                files++;
              }
            }
          };

          walk('out');
          console.log(`RSC .txt processed: ${files} files; edits=${edits}; prefix=${prefix}`);
          NODE

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: out/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

